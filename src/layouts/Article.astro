---
import Base from "./Base.astro";
import ImageSlider from "$components/ImageSlider.svelte";
import type { ArticleMarkdown } from "$scripts/types";
import { makeDescription } from "$scripts/makeDescription";
import CustomImg from "$components/CustomImg/CustomImg.astro";

interface Props {
  markdown: ArticleMarkdown;
}

const { markdown } = Astro.props;
const { frontmatter, compiledContent } = markdown;
const { title, date, author, image_gallery } = frontmatter;

const splittedContent = compiledContent().split(/(<img.*?>)/g);

function getTagProperties(s: string) {
  const tagPropertyNameRegex = /(?<=\s)(.*?)(?==")/g;
  const tagPropertyValueRegex = /(?<==")(.*?)(?=")/g;

  let tagPropertyName: RegExpExecArray;
  let tagPropertyValue: RegExpExecArray;
  let properties: Record<string, string> = {};
  while (
    (tagPropertyName = tagPropertyNameRegex.exec(s)!) &&
    (tagPropertyValue = tagPropertyValueRegex.exec(s)!)
  ) {
    properties[tagPropertyName[0]] = tagPropertyValue[0];
  }

  return properties;
}
---

<Base title={title} description={makeDescription(compiledContent())}>
  <article>
    <h1>{title}</h1>

    {
      author && date && (
        <h4>
          {author}
          <br />
          {new Date(date).toLocaleDateString("pl")}
        </h4>
      )
    }

    {
      splittedContent.map((s) => {
        if (!s.includes("<img")) return <Fragment set:html={s} />;
        return <CustomImg {...getTagProperties(s)} />;
      })
    }

    {
      image_gallery && image_gallery.length > 0 && (
        <ImageSlider client:load images={image_gallery} />
      )
    }
  </article>
</Base>
<style>
  article {
    padding: 10vh 15vw;
  }

  article h1 {
    margin-bottom: 2em;
  }
</style>
