---
import type { MarkdownInstance } from "astro";
import type {
    FooterSectionFrontmatter,
    HeaderPageFrontmatter,
    NewsFrontmatter,
} from "./types";

export function filterDrafts<T extends MarkdownInstance<{ draft: boolean }>>(
    a: T[]
): T[] {
    return a.filter(
        ({ frontmatter }) =>
            frontmatter.draft == undefined || !frontmatter.draft
    );
}

export async function getNews() {
    const news: MarkdownInstance<NewsFrontmatter>[] = await Astro.glob(
        "../markdown/news/*.md"
    );
    const newsWithoutDrafts = filterDrafts(news);
    return newsWithoutDrafts.sort(
        (a, b) =>
            new Date(b.frontmatter.date).getTime() -
            new Date(a.frontmatter.date).getTime()
    );
}

export async function getHeaderPages() {
    const headerPages: MarkdownInstance<HeaderPageFrontmatter>[] =
        await Astro.glob("../markdown/header_pages/*.md");
    const headerPagesWithoutDrafts = filterDrafts(headerPages);
    return headerPagesWithoutDrafts.sort(
        (a, b) => a.frontmatter.position! - b.frontmatter.position!
    );
}

export async function getFooterSections() {
    const footerSections: MarkdownInstance<FooterSectionFrontmatter>[] =
        await Astro.glob("../markdown/header_pages/*.md");
    const footerSectionsWithoutDrafts = filterDrafts(footerSections);
    return footerSectionsWithoutDrafts.sort(
        (a, b) => a.frontmatter.position! - b.frontmatter.position!
    );
}
---
